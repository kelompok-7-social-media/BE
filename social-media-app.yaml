openapi: 3.0.3
info:
  title: Social-media-app API
  description: |-
    API Documentation for Social Media App By Group 7
  contact:
    email: Group7@alta.id
  version: 1.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/Group-Project7/social-media-app-api/1.0.0
  - description: Social Media API
    url: http://localhost:8000/

tags:
  - name: users
  - name: posts
  - name: comments
paths:
  /register:
    post:
      tags:
        - "users"
      description: used to register users
      summary: register users
      requestBody:
        content:
          application.json:
            schema:
              $ref: '#/components/schemas/requestRegisterUser'
      responses:
        201:
          description: "success register user"
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/responseRegisterUser'
        400:      
          $ref: '#/components/responses/badRequestResponse'
        500:
          $ref: '#/components/responses/serverErrorResponse'

  /login:
    post:
      tags:
        - "users"
      description: used to login
      summary: login user
      requestBody:
        content:
          application.json:
            schema:
              $ref: '#/components/schemas/requestLoginUser'
      responses:
        200:
          description: "login succes"
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/responseLoginUser'
        404:
          $ref: '#/components/responses/badRequestResponse'
        500:
          $ref: '#/components/responses/serverErrorResponse'
  /users:
    get:
      tags:
        - "users"
      description: used to show all user
      summary: getall users
      security:
        - jwt_auth: []      
      responses:
        200:
          description: successfully get all users
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/responseGetAllUser'
        404:
          $ref: '#/components/responses/notFoundResponse'
        500:
          $ref: '#/components/responses/serverErrorResponse'

    put:
      tags:
        - "users"
      description: used for update user data
      summary: update user
      security:
        - jwt_auth: []
      requestBody:
        content:
          application.json:
            schema:
              $ref: '#/components/schemas/requestUpdate'
      responses:
        200:
          description: success updated user
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/responseUpdateUser'
        400:
          $ref: '#/components/responses/badRequestResponse'
        404:
          $ref: '#/components/responses/notFoundResponse'
        500:
          $ref: '#/components/responses/serverErrorResponse'
    delete:
      tags:
        - "users"
      description: used to delete user
      summary: delete user
      security:
        - jwt_auth: []      
      responses:
        200:
          description: succes delete user
          content:
            application.json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: deleted successfully   
        404:
          $ref: '#/components/responses/notFoundResponse'
        500:
          $ref: '#/components/responses/serverErrorResponse'
  /users/{id}:
    parameters:
        - name: id
          in: path
          required: true
          schema: 
            type: integer
    get:
      tags:
        - "users"
      description: used to show profile
      summary: show user profile
      security:
        - jwt_auth: []      
      responses:
        200:
          description: success show user profile
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/responseProfile'
        404:
          $ref: '#/components/responses/notFoundResponse'
        500:
          $ref: '#/components/responses/serverErrorResponse'
  /posts:
    get:
      tags:
        - "posts"
      description: used to show all posts
      summary: get all posts

      responses: 
        200:
          description: Success get all post
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/responsePostArr'
        404:
          $ref: '#/components/responses/notFoundResponse'
        500:
          $ref: '#/components/responses/serverErrorResponse'
    post:
      tags:
        - "posts"
      description: used to add new post
      summary: add new post
      security:
        - jwt_auth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/requestPost'
            example:
              description: Happy New Year
              photos:
                - img1.jpg
      responses: 
        200:
          description: Success add new post
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/responseAddPost'
        404:
          $ref: '#/components/responses/notFoundResponse'
        500:
          $ref: '#/components/responses/serverErrorResponse'
  /posts/{user_id}:
    parameters:
        - name: user_id
          in: path
          required: true
          schema: 
            type: integer
    get:
      tags:
        - "posts"
      description: used to show all myposts
      summary: get all myposts

      responses: 
        200:
          description: Success get all mypost
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/responsePostArr'
        404:
          $ref: '#/components/responses/notFoundResponse'
        500:
          $ref: '#/components/responses/serverErrorResponse'
  /posts/{post_id}:
    parameters:
        - name: post_id
          in: path
          required: true
          schema: 
            type: integer
    put:
      tags:
        - "posts"
      description: used for update post 
      summary: update post
      security:
        - jwt_auth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/requestPost'
            example:
              description: My First Project
              photos:
                - img1.jpg
      responses:
        200:
          description: success updated post
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/responseUpdatePost'
                  
        400:
          $ref: '#/components/responses/badRequestResponse'
        404:
          $ref: '#/components/responses/notFoundResponse'
        500:
          $ref: '#/components/responses/serverErrorResponse'
    delete:
      tags:
        - "posts"
      description: used to delete post
      summary: delete post
      security:
        - jwt_auth: []
      
      responses:
        200:
          description: succes delete post
          content:
            application.json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: deleted successfully   
        404:
          $ref: '#/components/responses/notFoundResponse'
        500:
          $ref: '#/components/responses/serverErrorResponse'
          
  /comments:
    post:
      tags:
        - "comments"
      description: used to add comments
      summary: add comments
      security:
        - jwt_auth: []     
      requestBody:
        content:
          application.json:
            schema:
              type: object
              properties:
                post_id:
                  type: integer
                comment:
                  type: string
            example:
              post_id: 1
              comment: Nice !!!

      responses: 
        201:
          description: succes add comment
          content:
            application.json:
              schema: 
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      post_id:
                        type: integer
                      comment_id:
                        type: integer
                      comment: 
                        type: string
                      created_at:
                        type: string
                  message:
                    type: string
              example:
                data: 
                  post_id: 1
                  comment_id: 1
                  comment: Nice !!!
                  created_at: "01-01-2023"
                message: successfully added comment           
        400:
          $ref: '#/components/responses/badRequestResponse'        
        404:
          $ref: '#/components/responses/notFoundResponse'
        500:
          $ref: '#/components/responses/serverErrorResponse'
  
  /comments/{post_id}:
    parameters:
        - name: post_id
          in: path
          required: true
          schema: 
            type: integer
    get:
      tags:
        - "comments"
      description: used to show all comments
      summary: get all comments
      responses: 
        200:
          description: succes get all comments
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/responseGetAllComment'  
              example:
                data:
                  - comment_id: 1
                    username: herdiladania11
                    comment: Nice Bro
                    created_at: "10-01-2023"
                  - comment_id: 2
                    username: fajar1313
                    comment: OMG HAHAHAHA
                    created_at: "11-01-2023"
                  - comment_id: 3
                    username: RischiYuda
                    comment: XD
                    created_at: "12-01-2023"
                message: successfully show comments
        404:
          $ref: '#/components/responses/notFoundResponse'
        500:
          $ref: '#/components/responses/serverErrorResponse'
    delete:
      tags:
        - "comments"
      description: used to delete comments
      summary: delete comments
      security:
        - jwt_auth: []
      
      responses: 
        200:
          description: succes delete comment
          content:
            application.json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: deleted successfully    
        404:
          $ref: '#/components/responses/notFoundResponse'
        500:
          $ref: '#/components/responses/serverErrorResponse'
    
components:
  securitySchemes:
    jwt_auth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "used JWT token for Auth"
  schemas:
    requestRegisterUser:
      type: object
      properties:
        name:
         type: string
        username:
          type: string
        email:
         type: string
        password:
          type: string  
      example:
        name: MyName
        username: MyUserName
        email: MyEmail@gmail.com
        password: qwertyuiop12344567890qwertyuiop
    responseRegisterUser:
      type: object
      properties:
        data:
          type: object
          properties:
            data:
              type: object
              properties:
                name:
                  type: string
                username:
                  type: string
                email:
                  type: string
            message:
              type: string
      example:
        data:
          name: Myname
          username: MyUserName
          email: MyEmail@gmail.com
        message: registered successfully

    requestLoginUser:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      example:
        email: Myemail@gmail.com
        password: qwertyuiop12345678
    responseLoginUser:
      type: object
      properties:
        data:
          type: object
          properties:
            data:
              type: object
              properties:
                name:
                  type: string
                username:
                  type: string
                email:
                  type: string 
                token:
                  type: string
        message:
          type: string
      example:
        data:
          name: MyName
          username: MyUserName
          email: MyEmail@gmail.com
          token: 12344567890qwertyuiop
        message: login successfully
    responseProfile:
      type: object
      properties:
        data:
          type: object
          properties:
            name:
              type: string
            username:
              type: string
            email:
              type: string            
        message:
          type: string
      example:
        data:
          name: Myname
          username: MyUserName
          email: MyEmail@gmail.com
        message: Show profile successfully
    responseGetAllUser:
      type: object
      properties:
        data: 
          type: array
          items:
            type: object
        message:
          type: string
      example:
        data:
          - name: Myname
            username: MyUserName
            email: MyEmail@gmail.com
        message: succesfully show all users
    requestUpdate:
      type: object
      properties:
        name:
         type: string
        username:
          type: string
        email:
         type: string
        password:
          type: string  
      example:
        name: MyName
        username: MyUserName
        email: MyEmail@gmail.com
        password: qwertyuiop12344567890qwertyuiop
    responseUpdateUser:
      type: object
      example:
        data:
          name: Myname
          username: MyUserName
          email: MyEmail@gmail.com
        message: updated successfully     
    requestPost:
      type: object
      properties:
        description:
          type: string
        file_photos:
          type: array
          items:
            type: object
    responseAddPost:
      type: object
      properties:
        data: 
            type: object
        message:
          type: string     
      example:
        data: 
          post_id: 1
          username: herdiladania11
          description: Happy New Year
          created_at: "01-01-2023"
          photos:
              - img1.jpg
        message: successfully add new post
    responsePostArr:
      type: object
      properties:
        data: 
          type: array
          items:
            type: object
        message:
          type: string
      example:
        data: 
          - post_id: 1
            username: herdiladania11
            description: Happy New Year
            created_at: "01-01-2023"
            photos:
              - img1.jpg
          - post_id: 2
            username: Fajar1313
            description: Coding everywhere
            created_at: "05-01-2023"
            photos:
              - img1.jpg
          - post_id: 3
            username: RischiYuda
            description: "Coding, sometimes called computer programming, is how we communicate with computers. Code tells a computer what actions to take, and writing code is like creating a set of instructions. By learning to write code, you can tell computers what to do or how to behave in a much faster way. You can use this skill to make websites and apps, process data, and do lots of other cool things."
            created_at: "05-01-2023"
            photos: ""
        message: successfully get posts
    responseUpdatePost:
      type: object
      properties:
        data: 
            type: object
        message:
          type: string     
      example:
        data: 
          post_id: 1
          username: herdiladania11
          description: Happy New Year
          created_at: "01-01-2023"
          photos:
              - img1.jpg
        message: successfully updated post
    responseGetAllComment:
      type: object
      properties:
        data: 
          type: array
          items:
            type: object
            properties:
              comment_id:
                type: integer
              username:
                type: string
              comment: 
                type: integer
              created_at:
                type: string
        message:
          type: string      
  responses:
    badRequestResponse:
      description: Bad request
      content:
        application.json:
          schema:
            type: object
            properties:
              message:
                type: string
            example:
              message: input invalid
    notFoundResponse:
      description: Not Found
      content:
        application.json:
          schema:
            type: object
            properties:
              message:
                type: string
            example:
              message: data not Found
    serverErrorResponse:
      description: Internal Server Error
      content:
        application.json:
          schema:
            type: object
            properties:
              message:
                type: string
            example:
              message: server error